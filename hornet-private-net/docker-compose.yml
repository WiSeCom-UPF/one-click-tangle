version: "3"

networks:
  tangle:
    external:
      name: private-tangle

  tangle1:
    driver: overlay
      # name: offline_tangle

  tangle2:
    driver: overlay
      # name: offline_tangle


services:
  coo:
    hostname: coo
    # network_mode: host
    networks:
      # - tangle
      - tangle1
    image: gohornet/hornet:1.0.5
    restart: unless-stopped
    container_name: coo
    environment:
      - COO_PRV_KEYS
    expose:
      - 15600
    volumes:
      - ./config/config-coo.json:/app/config.json:ro
      - ./config/profiles.json:/app/profiles.json:ro
      - ./config/peering-coo.json:/app/peering.json:ro
      - ./db/private-tangle/coo.db:/app/db
      - ./p2pstore/coo:/app/p2pstore
      - ./db/private-tangle:/app/coo-state
      - ./snapshots:/app/snapshots
    cap_drop:
      - ALL
  
  node1:
    hostname: node1
    # network_mode: host
    networks:
      - tangle
      - tangle1
    image: gohornet/hornet:1.0.5
    restart: unless-stopped
    container_name: node1
    expose:
      - 14265
      - 8081
      - 1883
      - 15600
      - "14626/udp"
    ports:
      - "0.0.0.0:14265:14265"
      - "0.0.0.0:8081:8081"
      - "0.0.0.0:15600:15600"
    volumes:
      - ./config/config-node1.json:/app/config.json:ro
      - ./config/profiles.json:/app/profiles.json
      - ./config/peering-node1.json:/app/peering.json
      - ./db/private-tangle/node1.db:/app/db
      - ./p2pstore/node1:/app/p2pstore
      - ./snapshots:/app/snapshots
    cap_drop:
        - ALL

  node2:
    hostname: node2
    # network_mode: host
    networks:
      - tangle
      - tangle2
    image: gohornet/hornet:1.0.5
    restart: unless-stopped
    container_name: node2
    expose:
      - 14265
      - 8081
      - 1883
      - 15600
      - "14626/udp"
    ports:
      # - "0.0.0.0:14265:14265"
      - "0.0.0.0:8085:8081"
      # - "0.0.0.0:15600:15600"
    volumes:
      - ./config/config-node2.json:/app/config.json:ro
      - ./config/profiles.json:/app/profiles.json
      - ./config/peering-node2.json:/app/peering.json
      - ./db/private-tangle/node2.db:/app/db
      - ./p2pstore/node2:/app/p2pstore
      - ./snapshots:/app/snapshots
    cap_drop:
        - ALL
  
  spammer1:
    hostname: spammer1
    # network_mode: host
    networks:
      # - tangle
      - tangle1
    image: gohornet/hornet:1.0.5
    restart: unless-stopped
    container_name: spammer1
    expose:
      - 15600
      - 8081
      - "14626/udp"
    ports:
      - "0.0.0.0:8083:8081"
    volumes:
      - ./config/config-spammer1.json:/app/config.json:ro
      - ./config/profiles.json:/app/profiles.json
      - ./config/peering-spammer1.json:/app/peering.json
      - ./db/private-tangle/spammer1.db:/app/db
      - ./p2pstore/spammer1:/app/p2pstore
      - ./snapshots:/app/snapshots
    cap_drop:
        - ALL

  spammer2:
    hostname: spammer2
    # network_mode: host
    networks:
      # - tangle
      - tangle2
    image: gohornet/hornet:1.0.5
    restart: unless-stopped
    container_name: spammer2
    expose:
      - 15600
      - 8081
      - "14626/udp"
    ports:
      - "0.0.0.0:8084:8081"
    volumes:
      - ./config/config-spammer2.json:/app/config.json:ro
      - ./config/profiles.json:/app/profiles.json
      - ./config/peering-spammer2.json:/app/peering.json
      - ./db/private-tangle/spammer2.db:/app/db
      - ./p2pstore/spammer2:/app/p2pstore
      - ./snapshots:/app/snapshots
    cap_drop:
        - ALL

  node-autopeering:
    hostname: node-autopeering
    # network_mode: host
    networks:
      - tangle
    image: gohornet/hornet:1.0.5
    restart: unless-stopped
    container_name: node-autopeering
    expose:
      - "14626/udp"
    ports:
      - "0.0.0.0:14626:14626/udp"
    volumes:
      - ./config/config-autopeering.json:/app/config.json:ro
      - ./config/profiles.json:/app/profiles.json
      - ./db/private-tangle/node-autopeering.db:/app/db
      - ./p2pstore/node-autopeering:/app/p2pstore
    cap_drop:
        - ALL
